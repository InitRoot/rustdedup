name: Cross-Compile Rust Project

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0 # Fetch all history for all tags and branches

    - name: Determine Next Version
      id: next_version
      run: |
        # Example: Increment patch version
        # Requires git tag history to determine the next version
        # Fallback to 1.0.0 if no tags are found
        LAST_VERSION=$(git describe --tags --abbrev=0 --match "v*" 2> /dev/null || echo "v0.0.0")
        NEXT_VERSION=$(echo $LAST_VERSION | awk -F. '{print $1 "." $2 "." $3+1}')
        echo "Next version: $NEXT_VERSION"
        echo "::set-output name=version::$NEXT_VERSION"
        echo "NEW_VERSION=$NEXT_VERSION" >> $GITHUB_ENV

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true

    - name: Install cross
      run: cargo install cross

    - name: Build with cross
      run: cross build --release --target ${{ matrix.target }} 
      env:
        CROSS_COMPILE: 1

    - name: Artifacts name
      run: echo "ARTIFACT_NAME=$(echo ${{ matrix.target }} | tr '-' '_')" >> $GITHUB_ENV

    - uses: actions/upload-artifact@v2
      with:
        name: ${{ env.ARTIFACT_NAME }}_artifact
        path: target/${{ matrix.target }}/release/
        
    - name: Check if Release Exists
      id: check_release
      run: |
        RELEASE=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.NEW_VERSION }})
        if [[ $RELEASE == *"\"tag_name\":\"${{ env.NEW_VERSION }}\""* ]]; then
          echo "::set-output name=exists::true"
        else
          echo "::set-output name=exists::false"
        fi
    
    - name: Create Release
      if: steps.check_release.outputs.exists == 'false'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.ACTIONSGIT }}
      with:
        tag_name: ${{ env.NEW_VERSION }}
        release_name: Release ${{ env.NEW_VERSION }}
        draft: false
        prerelease: false

    - name: Zip the artifact
      run: zip -r ${{ env.ARTIFACT_NAME }}_artifact.zip target/${{ matrix.target }}/release/

    - name: List files in the workspace
      run: ls -lah

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.ACTIONSGIT }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ env.ARTIFACT_NAME }}_artifact.zip
        asset_name: ${{ env.ARTIFACT_NAME }}_artifact.zip
        asset_content_type: application/zip
